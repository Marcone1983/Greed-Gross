name: 🔍 PR Quality Checks

on:
  pull_request:
    branches: [ main, production ]

jobs:
  code-quality:
    name: 🧹 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 📂 Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: 🧹 Lint Check
      run: ./gradlew lintDevDebug --stacktrace
      
    - name: 📊 Upload Lint Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: app/build/reports/lint-results-devDebug.html
        
    - name: 🧪 Unit Tests
      run: ./gradlew testDevDebugUnitTest --stacktrace
      
    - name: 📊 Test Coverage
      run: ./gradlew jacocoTestReport
      
    - name: 📈 Coverage Report
      uses: codecov/codecov-action@v4
      with:
        files: ./app/build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella

  build-validation:
    name: 🔨 Build Validation
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        flavor: [dev, prod]
        build-type: [debug]
        
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: ☕ Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 📂 Cache Gradle
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        
    - name: 🔨 Build ${{ matrix.flavor }}${{ matrix.build-type }}
      run: ./gradlew assemble${{ matrix.flavor }}${{ matrix.build-type }} --stacktrace
      env:
        OPENAI_API_KEY: "test-key-for-build"

  security-check:
    name: 🛡️ Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔍 Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: 🛡️ Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'greed-gross-app'
        path: '.'
        format: 'HTML'
        
    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: reports/

  comment-pr:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    needs: [code-quality, build-validation, security-check]
    if: always()
    
    steps:
    - name: 💬 Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🔍 PR Quality Report')
          );
          
          const reportBody = `
          ## 🔍 PR Quality Report
          
          | Check | Status |
          |-------|--------|
          | 🧹 Code Quality | ${{ needs.code-quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 🔨 Build Validation | ${{ needs.build-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 🛡️ Security Check | ${{ needs.security-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          
          ### 📱 Build Artifacts
          - Debug APK will be available after merge
          - Release APK only on production branch
          
          ### 🚀 Next Steps
          ${{ needs.code-quality.result == 'success' && needs.build-validation.result == 'success' && needs.security-check.result == 'success' && '✅ Ready to merge!' || '❌ Please fix issues before merging' }}
          
          ---
          *Report generated by GitHub Actions* 🤖
          `;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: reportBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: reportBody
            });
          }